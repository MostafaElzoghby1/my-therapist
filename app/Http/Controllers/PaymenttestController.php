<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Stripe\Stripe;
use Stripe\StripeClient;
class PaymenttestController extends Controller
{
    public function stripePost(Request $request)
    {
        Stripe::setApiKey(env('STRIPE_SECRET'));

        $stripe = new StripeClient(env('STRIPE_SECRET'));

        $token = \Stripe\Token::create([
            'card' => [
                'number' => '4242424242424242', // Example test card number
                'exp_month' => 12, // Example expiration month (e.g., December)
                'exp_year' => 2023, // Example expiration year
                'cvc' => '123' // Example CVC
            ]
        ]);
        
        // Use the token to create a charge
        $response = \Stripe\Charge::create([
            'amount' => 4000, // Example amount in cents (e.g., $4.00)
            'currency' => 'egp', // Currency code (e.g., USD, EUR, etc.)
            'source' => $token->id, // Token ID generated by Stripe
            'description' => $request->description // Description for the charge
        ]);
        
        // Return the response as JSON
        return response()->json($response); 
    }
}
// use Stripe\Account;
// use Stripe\Transfer;
// use Illuminate\Http\Request;
// use Illuminate\Support\Facades\Auth;
// use Stripe\Stripe;

// class PaymentController extends Controller
// {
//     public function createExpressAccount(Request $request)
//     {
//         // Set Stripe API key
//         Stripe::setApiKey(env('STRIPE_SECRET'));

//         // Create an express account
//         $account = Account::create([
//             'type' => 'express',
//             'country' => 'US',
//             'email' => $request->input('email'),
//             'capabilities' => [
//                 'transfers' => ['requested' => true],
//             ],
//         ]);

//         // Save temporary account ID to database for the user
//         $user = Auth::user();
//         $user->stripe_account_id = $account->id;
//         $user->save();

//         return response()->json(['account_id' => $account->id]);
//     }

//     public function createPayment(Request $request)
//     {
//         // Set Stripe API key
//         Stripe::setApiKey(env('STRIPE_SECRET'));

//         // Create a deferred payment
//         $transfer = Transfer::create([
//             'amount' => $request->input('amount'),
//             'currency' => 'usd',
//             'destination' => $request->input('stripe_account_id'), // Temporary account ID
//             'description' => 'Deferred payment',
//         ]);

//         return response()->json(['transfer' => $transfer]);
//     }
// }

